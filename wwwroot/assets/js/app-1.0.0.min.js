var chessknight;
(function (chessknight) {
    'use strict';
    angular.module('chessknight', ['ngRoute']);
})(chessknight || (chessknight = {}));
var chessknight;
(function (chessknight) {
    class Chessboard {
    }
    chessknight.Chessboard = Chessboard;
})(chessknight || (chessknight = {}));
var chessknight;
(function (chessknight) {
    class ChessKnightController {
        constructor($http) {
            this.$http = $http;
            this.http = $http;
            this.knightId = '';
            this.oldKnightId = '';
            this.checked = false;
            this.sizes = new Array();
            this.makeSizes();
            this.length = this.sizes[6];
            this.width = this.sizes[6];
            this.makeMap();
        }
        makeSizes() {
            for (var i = 0; i < 7; i++) {
                this.sizes[i] = i + 2;
            }
        }
        clean() {
            var divs;
            divs = angular.element(document.querySelectorAll("div.divTableCell"));
            divs.removeClass('opaque');
            divs.removeClass('highlightTurnOne');
            divs.removeClass('highlightTurnTwo');
            divs.removeClass('imgKnight');
        }
        makeMap() {
            this.chessboard = this.matrix(this.length, this.width);
            this.knightId = "";
            this.oldKnightId = "";
            this.clean();
        }
        matrix(rows, cols) {
            var matrix = new chessknight.Chessboard;
            var colsArray = ['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h'];
            for (var i = 0; i < rows; i++) {
                matrix[i] = [];
                matrix[i] = new Array(cols);
                for (var j = 0; j < cols; j++) {
                    matrix[i][j] = colsArray[j] + (rows - i);
                }
            }
            return matrix;
        }
        highlightSquares(squareId, squaresArray) {
            var divs, divItem;
            divs = angular.element(document.querySelectorAll("div.divTableCell"));
            divs.addClass('opaque');
            for (let i = 0; i < squaresArray[0].length; i++) {
                divItem = angular.element(document.querySelector("div#" + squaresArray[0][i]));
                divItem.removeClass('opaque');
                divItem.addClass('highlightTurnOne');
            }
            for (let i = 0; i < squaresArray[1].length; i++) {
                divItem = angular.element(document.querySelector("div#" + squaresArray[1][i]));
                divItem.removeClass('opaque');
                divItem.addClass('highlightTurnTwo');
            }
        }
        knightMovement(squareId) {
            var divItem;
            this.clean();
            if (this.oldKnightId != '') {
                divItem = angular.element(document.querySelector("div#" + this.oldKnightId));
                divItem.removeClass('imgKnight');
                divItem = angular.element(document.querySelector("div#" + squareId));
                divItem.addClass('imgKnight');
                this.oldKnightId = squareId;
            }
            else {
                divItem = angular.element(document.querySelector("div#" + squareId));
                divItem.addClass('imgKnight');
                this.oldKnightId = squareId;
            }
        }
        getData(squareId) {
            this.http.get('http://127.0.0.1:5000/chess/' + squareId)
                .then((response) => {
                this.highlightSquares(squareId, response.data);
            });
        }
        highlightsAndKnightOnSquareClick(squareId) {
            this.knightId = squareId;
            this.knightMovement(squareId);
            if (this.checked) {
                this.getData(squareId);
            }
        }
        highlightsAndKnightOnButtonClick() {
            if (this.knightId != "" && !this.checked) {
                this.knightMovement(this.knightId);
                this.getData(this.knightId);
            }
        }
    }
    chessknight.ChessKnightController = ChessKnightController;
    angular.module('chessknight').controller('chessCtrl', ChessKnightController);
})(chessknight || (chessknight = {}));
